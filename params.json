{"body":"# Checkfront API\r\n![Checkfront API](https://www.checkfront.com/images/brand/Checkfront-Logo-45.png)\r\n\r\n*version 2.1*\r\n\r\n---\r\n\r\nThe Checkfront API allows developers to expand and build on the [Checkfront Booking Platform](http://www.checkfront.com). The API makes it easy to create web, desktop & mobile applications that integrate and with your Checkfront account.\r\n\r\nOur API is built around open, standard and secure technologies to streamline development and maintain integrity of your data.\r\n\r\nThe Checkfront API extends the following functionality:\r\n\r\n* Query inventory availability.\r\n* Get date based rate and pricing information.\r\n* Create a new booking.\r\n* Update an existing booking.\r\n* Retrieve customer information.\r\n\r\n### Prerequisites:\r\n\r\nThis document assumes you have some knowledge of programming, and API implementations -- if not, please see our list of existing plug-ins and extensions or contact us to for in introduction to a qualified Checkfront developer in your area.\r\n\r\nSome functionality documented here may not be available to you based on your plan, or access level of your account.  \r\n\r\n## REST Interface\r\n\r\nThe Checkfront API uses a REST interface. This means that method calls are made over the Internet by sending standard HTTPs GET or POST requests to the Checkfront API REST server.\r\n\r\nNearly any computer language can be used to communicate over HTTP with the REST server including remote web sites, mobile devices and desktop applications.\r\n\r\n## Authentication and Encryption (OAuth2)\r\n\r\nCheckfront makes use of the open standard OAuth2 to provide secure and transparent authentication with the API. OAuth allows you to make your Checkfront account available to external applications without needing to provide your login and password.\r\n\r\nAll queries to the API are required to be made over a SSL authenticated OAuth2 session. Checkfront currently supports Draft 20 of the OAuth2 spec. For those switching from OAuth1, you'll notice it's significantly easier to work with, and generally performs better.\r\n\r\nIf your app isn't going to be distributed outside of your organization, you can generate oAuth2 access keys within the app to by-pass the initial authentication routine.\r\n\r\nPlease see our SDK's or support libraries for OAuth2 in your preferred environment.\r\n\r\n### Endpoints\r\n\r\nEvery Checkfront account operates in their own segregated environment, secure by a unique domain. In most cases, this is : https://your-company.checkfront.com. In this document this will be referred to as your Checkfront URL or your-company.checkfront.com (this may differ depending on your country).\r\n\r\n    https://your-company.checkfront.com/api/2.1/\r\n\thttps://your-company.checkfront.com/oauth/\r\n\r\n### Response Formatting (JSON)\r\n\r\nAll response is formatted in JSON (JavaScript Object Notation).All modern languages are able to quickly parse JSON. See: PHP: json_decode, Ruby: JSON.parse, .Net Json.NET, Javascript / jQuery: jQuery.getJSON.\r\n\r\n### Representation\r\n\r\n* All JSON should be UTF-8 encoded.\r\n* Date and time values ISO 8601 formatted, eg: YYYY-MM-DD, HH:MM:SS.\r\n* Dates are specified in the timezone configured in the account unless otherwise noted.\r\n* Booleans are either 1 (true) or 0 (false).\r\n* Currency values are decimal formatted, e.g: 119.20.\r\n\r\n## General Housekeeping\r\n\r\nAPI throttle limit: We reserve the right to tune the limitations, but they are always set high enough to allow a well-behaving interactive program to do its job.\r\n\r\nWhen the rate limit is exceeded Checkfront will send an HTTP 503 status code. The number of seconds until the throttle is lifted is sent via the \"Retry-After\" HTTP header, as specified in RFC 2616.\r\n\r\n## API Request\r\n\r\nOnce authenticated, a basic request to the API will return some general information about the account you are connecting to. This header information is included in all successful calls to the API, but may be left out of examples in this document.\r\n\r\n\tGET: http://demo.checkfront.com/api/2.1/\r\n\r\n```json\r\n{\r\n    \"version\":\"2.1\",\r\n    \"id\":\"demo.checkfront.com\",\r\n    \"name\":\"Demo\",\r\n    \"currency_id\":\"USD\",\r\n    \"currency_symbol\":\"$\",\r\n    \"session_id\":\"rmvm4jf7kh02n6dde8s9f20me1\"\r\n}\r\n```\r\n\r\nError Messages\r\n\r\n```json\r\n{\r\n    \"error\":\"invalid_request\",\r\n    \"error_description\":\"The access token was not found.\"\r\n}\r\n```\r\n\r\n### API Notifications\r\n\r\nAPI notifications provide the ability to send an automated notification when a new booking is created or updated. You can configure API notifications in your account under Manage / API / Notifications.\r\n\r\n### Sample Code\r\n\r\nOur SDKs (software development kit) handles most of the complex authentication (OAuth2) issues involved with consuming the Checkfront API. They also include sample code and additional documentation and up and running with the API in no time.\r\n\r\nAll of our SDKs are open source and are [available on Github](https://github.com/Checkfront).  If you have a module to contribute, please let us know.\r\n\r\n### Terms of Use\r\n\r\nUse of this API is strictly bound by the terms as specified in [Checkfront API Terms of Service](http://www.checkfront.com/terms/#api).\r\n\r\n\r\n---\r\n\r\n# Checkfront API Objects\r\n\r\nAPI Objects provide read and write access to Checkfront data sets. You can access Checkfront objects through standard the REST interface.\r\n\r\nAPI Objects currently include: Inventory, Booking and Customer.\r\n\r\n# Inventory\r\n\r\nThe inventory object provides access to your master inventory. This allows you to query items, determine availability and pricing for a given period. The information returned can be used to create a booking in the system.\r\n\r\n##Categories\r\n\r\nItems are organized by categories in the system.  A full list of available categories can be retrived via the category object. \r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Description:</th>\r\n<td>Fetch list of categories</td>\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2/category/</td>\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>GET</td>\r\n</tr>\r\n<tr>\r\n<th>[category_id]</th>\r\n<td>Integer: optional category to return.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n\r\n## Items\r\n\r\nYou can query a list of available items based on search critera supplied in the API call.\r\n\r\nWhen no dates are passed in the API call, a full list of enabled items in the inventory.  When a date is passed, the API will return a \"**rated**\" response that includes pricing and availablity. \r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Description:</th>\r\n<td>Query items, optionally return pricing and availability.</td>\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/item/</td>\r\n</tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/item/<b>item_id</b> (single item)</td>\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>GET</td>\r\n</tr>\r\n<tr>\r\n<th>[start_date]</th>\r\n<td>Date: Start date.</td>\r\n</tr>\r\n<tr>\r\n<th>[end_date]</th>\r\n<td>Date: End date.</td>\r\n</tr>\r\n<tr>\r\n<th>[start_time]</th>\r\n<td>Time: Start time (used in hourly bookings).</td>\r\n</tr>\r\n<tr>\r\n<th>[end_time]</th>\r\n<td>Time: End time (used in hourly bookings).</td>\r\n</tr>\r\n<tr>\r\n<th>[category_id]</td>\r\n<td>Integer: Filter items by category.</td>\r\n</tr>\r\n<tr>\r\n<th>[discount_code]</th>\r\n<td>String: discount or voucher code to be used.</td>\r\n</tr>\r\n<tr>\r\n<th>[rules]</th>\r\n<td>String: supply 'soft' to not trigger date based rule errors.</td>\r\n</tr>\r\n<tr>\r\n<th>[param]</td>\r\n<td>Array: See - Booking parameters below.</td>\r\n</tr>\r\n</tbody>\r\n</table> \r\n\r\n###Booking Paramaters\r\n\r\nBooking parameters are defined globally in your system, and can also be configured per item.  Your parameters specify the number of items to book, for example Child and Adult.  These are completely configurable in your account under Manage / Settings / Configure.\r\n\r\nTo query specific pricing an availability you need to pass the appropriate parameters in your api call, using the ID's specified in your system configuration.\r\n\r\nLet's say for instance you have 2 parameters configured.  Adults (id: adults), Children (id: children).  To get pricing for 2 a adults and one child you would pass: **param[adults]=2&param[children]=1** in your API call.\r\n\r\n\tGET /api/2.1/item/19start_date=20131230&end_date=20131230&end_date=20131230&param[adults]=2&param[children]=1\r\n\r\nBooking parameters have many options, and can be configured to control inventory in very specific ways.  See the Checkfront support centre for more information.\r\n\r\n### Item details\r\n\r\nTo get detailed pricing and availbility on a specific item, supply the item_id in the API call **path** along with any of the filter paramaters.  For example, to get item 19:\r\n\r\n\tGET /api/2.1/item/19/?start_date=20131230&end_date=20131230&end_date=20131230\r\n\r\n\r\n## SLIP\r\n\r\nThe item SLIP is a string returned when making a rated query to a specific item.  The slip contains the information needed to make a booking.  Do not attempt to reverse engineer this as the format changes.  It must be optioned vi a rated API call.\r\n\r\n--- \r\n\r\n# Booking\r\n\r\nThe booking object can be used in conduction with the item object to create a new booking on the system.\r\n\r\n##Sessions\r\n\r\nWhen creating a booking, the details of the booking are stored in an API session.  This allows you to add multiple items to a booking, remove items and also updates the server with your intent to book the item(s) to prevent over bookings.  \r\n\r\nTo start a new session, you must have the booking SLIP returned when querying item to be booked.\r\n\r\nDescription:|Set or update a booking session.\r\n\r\n<table>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/session</td>\r\n</tr>\r\n<tr><th>Methods:</th>\r\n<td>GET, POST</td></tr>\r\n<tr><th>[session_id]</th>\r\n<td>String: system generated session id.</td></tr>\r\n<tr><th>[slip]</th>\r\n<td>String: system generated SLIP from rated Item query.</td></tr>\r\n</tbody>\r\n</table> \r\n\r\n### Create a new session\r\n\tPOST /api/2.1/session?slip=3.20130303X1-guests.1\r\n\r\n\r\n```json\r\n{\r\n\"version\": \"2.1\",\r\n\"host_id\": \"demo.checkfront.com\",\r\n\"name\": \"My Company\",\r\n\"request\": {\r\n\"obj\": \"booking/session\",\r\n\"status\": \"SUCCESS\",\r\n\"results\": 0\r\n},\r\n\"booking\": {\r\n\"session\": {\r\n\"id\": \"rtdv4osethqurlmqgi55mcrkm4\",\r\n\"slip\": {\r\n\"1\": \"3.20130303X1-guests.1\",\r\n}\r\n},\r\n```\r\n\r\n### Getting session details\r\n\r\nYou can fetch the details of the purposed booking by accessing the session object.  The item details will be returned with any request to the booking session.\r\n\r\n \r\n\tGET /api/2.1/session?slip=3.20130303X1-guests.1\r\n\t\r\n\r\nIf you wish to add multiple items at once, you can supply the SLIP in the form of an array.\r\n \r\n\r\n\tGET /api/2.1/session?slip=[]3.20130303X1-guests.1&slip[]=2.20130303X1-guests.2\r\n\r\n\r\n### Add more items to a session\r\n\r\nDepending on your platform or SDK, the session can be passed in the form of a cookie or in the query string.  For the sake of documenation we'll pass it in the query string.  \r\n \r\n\tGET /api/2.1/session?slip=3.20130303X1-guests.1&slip=rtdv4osethqurlmqgi55mcrkm4\r\n\r\n## Creating A Booking\r\n\r\nWhen the required items are added to your booking session, you can create the booking.  \r\n\r\n\r\n### Booking Fields\r\nNew bookings require customer information, and other fields as defined by your system configuration.\r\n\r\nYou can dynamically fetch the fields required to complete the booking by calling the booking/form object along with the session, before calling booking/create.\r\n\r\n<table>\r\n<tr><th>Description:</th>\r\n<td>Fetch Booking Fields.</td></tr>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/form</td></tr>\r\n</tbody>\r\n</table>\r\n\r\nThis returns an array of fields and their properties that need to be used when creating the booking.\r\n\r\n### Booking Create\r\n\r\nTo create a booking, submit the fields from the booking/form object along with the session id.  \r\n\r\n<table>\r\n<tr><th>Description:</th>\r\n<td>Create a booking.</td></tr>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/create</td></tr>\r\n<tr><th>Methods:</th>\r\n<td>POST</td></tr>\r\n<tr>\r\n<th>[session_id]</th><td>String: system generate session_id</td></tr>\r\n</tr>\r\n<tr><th>[fields]</th><td>Array: populated fields in a name value pair array from the booking/fields call.</td></tr>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\nIf a booking is successfully created, you will be returned a completion url.  If payment is required, this will be the payment page, otherwise it will be the receipt page.\r\n\r\nThere is currently no way to complete a payment via the API.\r\n\r\n\r\n##Check-in & Check-out\r\n\r\nYou can check-in, and checkout a booking.  By default, a note is created under the name of the account when a booking is checked in, or checked out.  VOID, and CANCELLED bookings can not be checked-in or out.\r\n\r\n<table>\r\n<tbody>\r\n<tr><th>Description:</th>\r\n<td>Check-in a booking.</td></tr>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/<b>booking_id</b>/checkin</td></tr>\r\n<tr><th>Methods:</th>\r\n<td>POST</td></tr>\r\n</tbody>\r\n</table> \r\n\r\n<table>\r\n<tr><th>Description:</th>\r\n<td>Check-out a booking.</td></tr>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/<b>booking_id</b>/checkout</td></tr>\r\n<tr><th>Methods:</th>\r\n<td>POST</td></tr>\r\n</table> \r\n\r\n\tPOST /api/2.1/booking/JHLL-20131230/checkin\r\n\r\n##Bookmark\r\nBookmarks are made available in the Checkfront mobile apps, and are listed under bookings while logged into the platform.  You can add or remove a bookmark to a specific booking for a specific account.\r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Description:</th>\r\n<td>Check-out a booking.</td>\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/booking/<b>booking_id</b>/checkout</td>\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>POST</td>\r\n</tr>\r\n</tbody>\r\n</table> \r\n\r\n## Notes\r\nNotes can be added to bookings.  By default the authenticated account will be used. \r\n\r\n<table>\r\n<tr><th>Description:</th>\r\n<td>Check-out a booking.</td></tr>\r\n<tr><th>Path:</th>\r\n<td>/api/2.1/booking/<b>booking_id</b>/note</td></tr>\r\n<tr>\r\n<th>Methods:</th><td>POST</td>\r\n</tr>\r\n<tr>\r\n<th>[body]</th>\r\n<td>String: body of the note.  Upto 3000 chars.</td>\r\n</tr>\r\n</tbody>\r\n</table> \r\n\r\n## Status\r\nThe status of an existing booking can be modified using the booking/status object.\r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Description:</th>\r\n<td>Change booking status.</td>\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/booking/<b>booking_id</b>/status</td>\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>POST</td>\r\n</tr>\r\n<tr>\r\n<th>[status_id]</th>\r\n<td>String: new booking status.</td>\r\n</tr>\r\n</tbody>\r\n</table> \r\n\r\n## Journal\r\n\r\nThe booking journal provides access to existing bookings in the system.  You can query bookings by customer id, or individually by id.\r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Description:</th>\r\n<td>Fetch details on a booking.</td>\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/booking/journal/\r\n</tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/booking/journal/UJII-20131230 (single item)\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>GET</td>\r\n</tr>\r\n<tr>\r\n<th>[customer_id]</th>\r\n<td>String: customer id filter.</td>\r\n</tr>\r\n<tr>\r\n<th>[start_date]</th>\r\n<td>Date: start date range.</td>\r\n</tr>\r\n<tr>\r\n<th>[end_date]</th>\r\n<td>Date: end date.</td>\r\n</tr>\r\n<tr>\r\n<th>[options]</th>\r\n<td>Array: transactions, notes - options[transactions]=1.</td>\r\n</tr>\r\n</table> \r\n\r\nYou can filter bookings based on the available arguments, or fetch a single booking by supplying the booking_id in the path of the API call.  If a single booking is requested, the response is returned in a single \"booking\" array.  If multiple items are requested, the response is in a \"bookings\" array.\r\n\r\n### Date Range\r\nIf selecting bookings based on a date range, both the start date and end dates are required.  The dates are specific to the start and end date of items in the booking. A booking contain items in the invoice not in the time range if other items match.\r\n\r\n---\r\n\r\n# Customers\r\n\r\nThe customer object provides access to customers in the system. Customers are created when a booking is made.  \r\n\r\nThere is currently no way to create customers via the API, outside of creating a booking. \r\n\r\n### Search customers\r\n\r\nYou can query customers based on indexed fields, including email address, name and customer id.\r\n\r\n<table>\r\n<tr><th>Description:</th>\r\n<td>Query customer records</td></tr>\r\n<tr><th>Path:</th><td>/api/2.1/customer/</td></tr>\r\n<tr>\r\n<th>Path:</th>\r\n<td>/api/2.1/customer/XX5-037-755 (single record)</td>\r\n</tr>\r\n<tr>\r\n<th>Methods:</th>\r\n<td>GET</td>\r\n</tr>\r\n<tr>\r\n<th>[customer_email]</th>\r\n<td>String: a unique customer e-mail address.</td>\r\n</tr>\r\n<tr>\r\n<th>[customer_id]</th><td>String: a unique customer id.</td></tr>\r\n<tr>\r\n<th>[options]</th><td>Array: optional return formatting.  Currently: bookings=1 also includes bookings made by the customer.</td></tr>\r\n</table>\r\n\r\n\tGET /api/2.1/customer/?customer_email=test@checkfront.com&options[bookings]=1\r\n\r\n\r\n---\r\n\r\nFollow [@checkfront](http://twitter.com/checkfront) on Twitter for the latest news.\r\n\r\nHave questions on the API?  E-mail us at [code@checkfront.com](code@checkfront.com).\r\n\r\n","tagline":"Developer Resources","google":"UA-5551677-1","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Checkfront Api"}